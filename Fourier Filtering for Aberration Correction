import numpy as np
import matplotlib.pyplot as plt
from scipy.fftpack import fft2, ifft2, fftshift

# Generate a sample aberrated wavefront (Zernike mode + noise)
N = 256
x = np.linspace(-1, 1, N)
y = np.linspace(-1, 1, N)
X, Y = np.meshgrid(x, y)
R = np.sqrt(X**2 + Y**2)

# Example of Coma aberration (n=3, m=1) with noise
wavefront = 3 * (2 * R**3 - 3 * R) + 0.3 * np.random.randn(N, N)

# Compute Fourier Transform
wavefront_fft = fft2(wavefront)
wavefront_fft_shifted = fftshift(wavefront_fft)

# Design a low-pass filter (Gaussian)
kx = np.fft.fftfreq(N)
ky = np.fft.fftfreq(N)
KX, KY = np.meshgrid(kx, ky)
K = np.sqrt(KX**2 + KY**2)
sigma = 0.05  # Filter strength
low_pass_filter = np.exp(-(K**2) / (2 * sigma**2))

# Apply filter in Fourier domain
filtered_wavefront_fft = wavefront_fft_shifted * low_pass_filter
filtered_wavefront = np.real(ifft2(np.fft.ifftshift(filtered_wavefront_fft)))

# Plot results
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.imshow(wavefront, cmap='jet', extent=[-1, 1, -1, 1])
plt.colorbar(label='Wavefront Aberration (radians)')
plt.title('Original Aberrated Wavefront')

plt.subplot(1, 2, 2)
plt.imshow(filtered_wavefront, cmap='jet', extent=[-1, 1, -1, 1])
plt.colorbar(label='Wavefront Aberration (radians)')
plt.title('Fourier-Filtered Wavefront')

plt.show()
